import pandas as pd
import numpy as np
import re
import nltk
from nltk.corpus import stopwords
from nltk.corpus import wordnet
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('omw-1.4')
import nlpaug.augmenter.word as naw
from tqdm.auto import tqdm
from numpy import random

# Load Data
df = pd.read_csv('path/data.csv')

# Create a separate label column
df["label_clean"] = df["label"]

# Replace Digits with Blanks
df['label_clean'] = df['label_clean'].str.replace('\d+', "")

# Assign Cleaning Criteria
REPLACE_BY_SPACE_RE = re.compile('[/(){}\[\]\|@,;.&!--#$%^*_+"”:<>"'"'"'?`~Â½¾]')
STOPWORDS = set(stopwords.words('english'))
MONTH = {'january','jan','february','feb','march','mar','april','apr','may','june','jun','july','jul','august','aug','september','sept','sep','october','oct','november','nov','december','dec'}

# Define Cleaning Sequence
def clean_text(text):
    """
        text: a string
        
        return: modified initial string
    """
    text = text.lower() # lowercase text
    text = REPLACE_BY_SPACE_RE.sub(' ', text) # replace REPLACE_BY_SPACE_RE symbols by space in text
    text = re.sub(r"\b[a-zA-Z]\b", ' ', text) # single character removal
    text = re.sub(r'\s+', ' ', text) # remove multiple spaces
    text = ' '.join(word for word in text.split() if word not in STOPWORDS) # delete stopwords from text
    text = ' '.join(word for word in text.split() if word not in MONTH) # delete month names from text

    return text

# Define Function to Retain only English Words
def check_for_word(s):
    return ' '.join(w for w in str(s).split(' ') if len(wordnet.synsets(w)) > 0) # retain only english words

# Clean Label
df['label_clean'] = df['label_clean'].apply(clean_text)

# Keep only English Words
tqdm.pandas(desc="Filtering only English Words")
df['label_clean'] = df['label_clean'].progress_apply(check_for_word)

# Remove Blank Rows
df['label_clean'].replace('', np.nan, inplace=True)
df.dropna(subset=['label_clean'], inplace=True)

# Generate augmented label text in new column
rand_aug = naw.RandomWordAug()
tqdm.pandas(desc="Augmenting Text")
df['label_aug'] = df.label_clean.progress_apply(rand_aug.augment)

# Convert augmented text to string
df['label_aug'] = df['label_aug'].str[0]

# Tokenize the augmented text
df['label_aug'] = df.apply(lambda row: row['label_aug'].split(), axis=1)

# Select one word from the token list
df['label_aug'] = [random.choice(x) for x in df["label_aug"]]

# Generate a new column with the original text with the new word added as the last word in the text
df["desc_le"] = df["description"] + ' ' + df["label_aug"]

# Create df2 for original description and label
df2 = df.filter(['description','label'], axis=1)

# Create df3 for semantically enhanced description and label
df3 = df.filter(['desc_le','label'], axis=1)

# Rename 'description' column of df3
df3.rename(columns={'desc_le':'description'}, inplace=True)

# Append df3 to df2
df = df2.append(df3)
