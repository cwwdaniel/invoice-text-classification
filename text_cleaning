import numpy as np
import re
import nltk
from nltk.corpus import stopwords
from nltk.corpus import wordnet
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('omw-1.4')
from bs4 import BeautifulSoup
from tqdm.auto import tqdm

REPLACE_BY_SPACE_RE = re.compile('[/(){}\[\]\|@,;.&!--#$%^*_+"”:<>"'"'"'?`~Â½¾]')
BAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')
STOPWORDS = set(stopwords.words('english'))

df['description'] = df['description'].str.replace('\d+', "")

def clean_text(text):
    """
        text: a string
        
        return: modified initial string
    """
    text = BeautifulSoup(text, "lxml").text # HTML decoding
    text = text.lower() # lowercase text
    text = REPLACE_BY_SPACE_RE.sub(' ', text) # replace REPLACE_BY_SPACE_RE symbols by space in text
    text = re.sub(r"\s+[a-zA-Z]\s+", ' ', text) # single character removal
    text = re.sub(r'\s+', ' ', text) # remove multiple spaces
    text = ' '.join(word for word in text.split() if word not in STOPWORDS) # delete stopwords from text

    return text
    
def check_for_word(s):
    return ' '.join(w for w in str(s).split(' ') if len(wordnet.synsets(w)) > 0) # retain only english words

# Clean Text
df['description'] = df['description'].apply(clean_text)

# Keep only English Words
tqdm.pandas(desc="Filtering only English Words")
df['description'] = df['description'].progress_apply(check_for_word)

# Remove Blank Rows
df['description'].replace('', np.nan, inplace=True)
df.dropna(subset=['description'], inplace=True)

# Drop duplicates in a new Dataframe df2
df2 = df[['description','label']].drop_duplicates()

# Create Pivot Table based on df2
df3 = pd.pivot_table(df2, values=['label'], index=['description'], aggfunc={'label': 'count'})

# Retain only Label Count > 1 
df3 = df3[df3['label'] > 1]

# Convert Pivot Table to Dataframe df3
df3 = df3.reset_index()

# Drop 'Label' column in df3
df3 = df3.drop(['label'], axis=1)

# Convert df3 to list
df3 = list(df3['description'])

# Retain original dataframe rows where 'description' matches df3 list
df = df[~df['description'].isin(df3)]

df
